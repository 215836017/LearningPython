
print('字符串和编码')
'''
标题：字符串和编码
'''
'''
1. ASCII编码是1个字节，而Unicode编码通常是2个字节
2. 新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码
需要多一倍的存储空间，在存储和传输上就十分不划算。所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。
UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，
只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间
4. UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的软件可以在UTF-8编码下继续工作
5. 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
6. 用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件
'''

'''
1. 如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。
2. 如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：'I\'m \"OK\"!'  表示 I'm "OK"!
3. 字符\本身也要转义，所以\\表示的字符就是\
4. 如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义
5. 多行字符串(三引号)还可以在前面加上r使用
'''
print('\t 12333')
print(r'\n\n\t \12344')

testThree1 = '''
abcdef
12345
==__==
'''
testThree2 = '''
abcdef\tghijk
12345\n678
==__==
'''
testThree3 = r'''
abcdef\tghijk
12345\n678
==__==
'''
print(testThree1)
print(testThree2)
print(testThree3)




'''
1. 在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言
2. 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符
3. 在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换
4. 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。
当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。

5. 申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码
6. 在Python中，采用的格式化方式和C语言是一致的，用%实现字符串的格式化
7. 另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多
'''
print('Hello %s, hello %s, I have money $%d' %('小明', '小红', 50000))
print('Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125))

'''
1. 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符
2. 要计算str包含多少个字符，可以用len()函数
3. len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数
'''
print('字母A对应的整数:', ord('A'))
print('字母\"中\"对应的整数:', ord('中'))
print('整数66对应的字母：', chr(66))
print('整数25991对应的字母：', chr(25991))



