"""注：基于python3.7.0"""

'1. 测试分号'
print('测试分号：语句末尾不加分号')
print('测试分号：语句末尾加分号');
'2. 注释'
'确保对模块, 函数, 方法和行内注释使用正确的风格，Python中的注释有单行注释和多行注释；'
'在Python中，井号(#)比较特殊，在代码中，井号后面到行尾的所有内容都将被忽略。'
# 这是一个注释
print("Hello, World!")
'多行注释用三个单引号或者三个双引号 将注释括起来，也称为文档注释，例如:'
#单引号（'''）
'''
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
'''
print("Hello, World!")
#双引号（"""）
"""
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
"""
print("Hello, World!")


'3. Python中的运算'
'加法运算的符号是+ ， 减法运算的符号是 - ， 乘法运算的符号是 * ，除法运算的符号是 / ， 求余运算的符号是  %'
print('2 + 5 =', 2 + 2)
print('2 - 5 =', 2 - 5)
print('2 * 5 =', 2 * 5)
print('2 / 5 =', 2 / 5)
print('5 % 2 =', 5 % 2)

'除法运算的结果为小数，即浮点数。如果想丢弃小数部分，即执行整除运算，可使用双斜杠 // '
print('2 / 5 =', 2 // 5)
print('5 / 2 =', 5 // 2)

'对于整除运算，它的原理是向下圆整，因此在结果为负数的情况下，圆整后结果离0更远。'
print('10 // 3 = ', 10 // 3)
print('-10 // 3 = ', -10 // 3)
print('10 // -3 = ', 10 // -3)
print('-10 // -3 = ', -10 // -3)

'求余运算符也可以用于浮点数和负数。'
print('2.75 % 0.5 = ', 2.75 % 0.5)
print('10.1 % 2 = ', 10.1 % 2)
print('10.2 % 2 = ', 10.2 % 2)
print('10.1 % 3 = ', 10.1 % 3)
print('10 % 3 = ', 10 % 3)
print('10 % -3 = ', 10 % -3)
print('-10 % 3 = ', -10 % 3)
print('-10 % -3 = ', -10 % -3)

'乘方（求幂）运算的符号是  **'
print('2的3次方 = ', 2 ** 3)
print('负的3的2次方 = ', -3 ** 2)
print('负3的2次方 = ', (-3) ** 2)
print('负3的3次方 = ', (-3) ** 3)

'4.  十六进制：0x开头, 八进制：0o开头, 二进制：0b开头'
print('0xAf = ', 0xAf)
print('0o17 = ', 0o17)
print('0b1001 = ', 0b1001)

'5. 变量'
'Python中的变量没有默认值。如下例子中，只写了x编译器会报错'
x = 3
print('x = ', x)

'在Python中，变量名称（标识符）只能由字母、数字和下划线组成，并且不能以数字开头。'

'6. 获取用输入'
'函数input可以从键盘获取用户输入，并以文本或字符串的方式返回。'
# input("the user name is: ")
# x = input('x = ')
# y = input('y = ')
# print('x * y =', int(x) * int(y))

'7. 模块'
'可将模块视为扩展，通过将其导入可以扩展Python功能。要导入模块，可以使用特殊命令import。例如导入math模块'
import math

print(math.floor(32.9))

'''如果确定不会从不同模块导入导入多个同名函数，你可能不想每次调用函数时都指定模块名。
在这种情况下，可以使用import命令的如下变种：from module import funcation'''
from math import sqrt

print(sqrt(9))

'''by the way, 函数sqrt用户计算平方根，下面看看向它提供一个负数的情况'''
# print(sqrt(-1))  # 程序运行后报错：ValueError: math domain error， 在有的平台上也会返回nan。
'Python标准库提供了一个专门用于处理复数的模块：cmath'
import cmath

print('-1的平方根 =',cmath.sqrt(-1))
