print('通用的序列操作 -- 切片')

'''
1. 使用切片可以访问特定范围内的多个元素。 
'''

'''
2. 最基本切片的格式：使用两个索引，并且在两个索引中间使用冒号分割
   使用步长的切片格式： 在使用两个索引的基础上，在后边再添加一个整数参数来指定步长
'''

numbers = [1, 'name', 0.99, 123, 'hello']
print(numbers[1:4])
'''
打印结果：
['name', 0.99, 123]
'''

'''
3. 如上述打印结果可知：切片中的索引是包前不包后。
   所以，如果要在切片中获取序列的最后一个，则切片的第二个索引直接使用序列的长度即可。
'''
print(numbers[3:len(numbers)])

'''
4. 如果要从序列的末尾开始数， 可使用负数索引
'''
array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print("array[-3:-1] = ", array[-3:-1])
print("array[-3:0] = ", array[-3:0])
print("array[-3:] = ", array[-3:])
print("array[-3:9] = ", array[-3:9])
print('array[-1:-3] = ', array[-1:-3])
'''
打印结果：
array[-3:-1] =  [7, 8]
array[-3:0] =  []
array[-3:] =  [7, 8, 9]
array[-3:9] =  [7, 8]
array[-1:-3] =  []
'''

'''
5 总结1：
     1) 正数：从左往右开始，0是第一个； 负数：从右往左开始，-1是最后一个
     2) 不管是正数，还是负数，还是正负数混合使用，在步长为正数的情况下，切片中两个索引指定元素的实际位置必须第一个索引
        指定的元素在第二个索引指定元素的左边。否则切片的结果就是空序列。
'''

'''
6. 使用步长：切片中默认步长是1，但是也可以显示地指定步长
'''
print('array[0:8:2] = ', array[0:8:2])
print('array[::3] = ', array[::3])
# print('array[0:8:0] = ', array[0:8:0])  # 报错：ValueError: slice step cannot be zero
print('array[0:8:-2] = ', array[0:8:-2])
print('array[8:0:-2] = ', array[8:0:-2])
print('array[8:0:-3] = ', array[8:0:-3])
'''
打印结果：
array[0:8:2] =  [0, 2, 4, 6]
array[::3] =  [0, 3, 6, 9]
array[0:8:-2] =  []
array[8:0:-2] =  [8, 6, 4, 2]
array[8:0:-3] =  [8, 5, 2]
'''

'''
7 总结2：
     1) 步长可以显示指定，可以为正数 or  负数
     2) 当步长为负数时，两个索引指定的元素范围必须是倒序的，否则切片的结果为空序列
'''
